@author: Constantino Tsarouhas
@copyright: Lift Standard Library Â© 2017 Lift Language Project

@available(from: Lift 1.0)
protocol Property : Function {
	
	@abstract: A value associated with another value.
	@details: A property is a value `property` that is associated with a value `subject` that can be queried like this: `subject.property`.
	
	type let Subject: Any.Type {
		@abstract: The type of values on which the property is defined.
	}
	
	type let Value: Any.Type {
		@abstract: The type of values that can be assigned to the property.
	}
	
	type let Argument = Subject {
		@abstract: The arguments of the property as a function, which are instances of the subject type.
	}
	
	type let Result = Value {
		@abstract: The results of the property as a function, which are values of the property.
	}
	
	type let failable = false {
		@abstract: Properties cannot throw errors.
	}
	
}

@available(from: Lift 1.0)
extension Property {
	derived existential type init(on Subject: Any.Type, typed Value: Any.Type)
}

@available(from: Lift 1.0)
infix operator func . <P : Property> (_: P.Subject.Type, property: P) -> P {
	
	@abstract: Returns given property.
	@details: To get a property `property` defined on a type `Subject`, write `Subject.property`. `Subject.property(subject)` is equivalent to `property(subject)` and `subject.property`.
	
	return property
	
}

@available(from: Lift 1.0)
infix operator func . <P : Property> (subject: P.Subject, property: P) -> P.Value {
	
	@abstract: Returns the value assigned to given property on a given subject.
	@details: To get the value of a property `property` on a value `subject`, write `subject.property`.
	
	return property(subject)
	
}

@available(from: Lift 1.0)
protocol MutableProperty : Property {
	
	@abstract: A property whose value can be reassigned.
	
	type let Mutator: Function.Type where Mutator.Argument == (Subject, newValue: Value), Mutator.Result == Subject, !Mutator.failable {
		@abstract: A function that, given a subject and a new value, produces a copy of the subject where the new value is assigned to the property.
	}
	
	let mutator: Mutator {
		@abstract: A function that, given a subject and a new value, produces a copy of the subject where the new value is assigned to the property.
	}
	
}

@available(from: Lift 1.0)
extension MutableProperty {
	derived existential type init(on Subject: Any.Type, typed Value: Any.Type)
}