@author: Constantino Tsarouhas
@copyright: Lift Standard Library © 2017 Lift Language Project

@available(from: Lift 1.0)
protocol Function {
	
	@abstract: A value that maps values of one type to values of another type.
	@discussion {
		
		A function expresses, in general terms, the mapping of values of type `Argument` to values of type `Result`. Free functions (cf. `FreeFunction`) are merely one type of function: methods, properties, subscriptors, initialisers, and other conforming types are all functions. When dealing with functions, it's recommended to always take a `Function` instead of a `FreeFunction`, `Method`, and so on.
		
		A function can be failable. Failable functions may fail to produce a result value, and instead produce an error. The general guideline is to throw an error when a condition has occurred that prevents a value from being produced but where the function's preconditions or invariants are still met. Division by zero is forbidden by a precondition and should therefore not produce an error; instead the division operation should raise a precondition failure (which immediately terminates the current agent). However, parsing an integer from a string should fail with an error because parsing also involves detecting strings not conforming to the grammar, which is a valid use case of parsing.
		
		A unfailable function type can be written as `Function<from: Argument, to: Result>` but also `Argument -> Result`. The arrow, when the type is read left-to-right, indicates the *processing* or *mapping* of a value of the left type to a value of the right type. A failable function type can be written as `Function<from: Argument, to: Result, throws: true>` but also `Argument throws -> Result`. The `throws` just before the arrow indicates that an error can occur before a value is produced. The `->` (and `throws ->`) type operator is right-associative type: `A -> B -> C` is the same as `A -> (B -> C)` and expresses a function whose result is a function `B -> C`.
		
		A function can be applied to an argument by wrapping the argument in parentheses (unless the argument is a tuple) and juxtaposing it with the function. This expression resolves to a result value. That is, given a function `f : Argument -> Result` and an argument `a : Argument`, `f(a)` evaluates to a value of type `Result`. If the function is failable, the expression or any superexpression must be prepended with the keyword `try`, e.g. `let result = try f(a)`.
		
		Note that functions cannot have side-effects. Clients of a function, the Lift compiler, and the Lift runtime are allowed to memoise, inline, and disregard a function with the presumption that a function always maps an argument to the same result and doesn't change anything else in the system.
		
		# Conformance to this protocol
		
		Every type that has a well-defined, unambiguous “mapping” semantic can conform to this protocol by adopting this protocol. For example, expression types are appropriate candidates from outside the standard library.
		
		The Lift compiler automatically derives concrete types that conform to this protocol for each free function, in a similar way to methods.
		
	    A free `sorted` function is compiled as if the following was written:
		
   			struct sorted : Function {
   				type let Argument = List
   				type let Result = List
   				func result(for list: List) -> List { … }
   			}
	
   		Type parameters in a function definition are compiled as type parameters in the corresponding type definition. For example, a free `func adding<N : Numeric>(_ n: N) -> Int` is compiled as if the following was written:
	
   			struct adding : Method {
   				derived type init(N: Any.Type)
   				type let N = N.Type
   				type let Argument = N
   				type let Result = Int
   				func result(for n: N) -> Int { … }
   			}
		
		Methods, initialisers, and other function-like constructs automatically conform to subprotocols of `Function`.
		
	}
	
	type let Argument: Any.Type {
		@abstract: The values taken by functions of this type.
	}
	
	type let Result: Any.Type {
		@abstract: The values produced by functions of this type.
	}
	
	type let failable: Bool {
		@abstract: A Boolean value indicating whether functions of this type may fail to produce a value and instead produce an error.
		@note: A function —even an unfailable one— can always raise a *failure*, which is different from throwing an *error*. A failure is raised when preconditions or invariants aren't met, which is prohibited by the language and result in the immediate termination of the current agent. Failures are a result from misconfiguration or programmer error; errors report a undesirable but not unexpected state that prevents a valid result being produced.
	}
	
	func result(for argument: Argument) throws[if: failable] -> Result {
		@abstract: Produces a result given an argument.
		@takes argument: The argument to the function.
		@throws: An error if no result could be produced.
		@produces: A result given `argument` as argument to the function.
	}
	
}

extension Function {
	derived existential type init(from Argument: Any.Type, to Result: Any.Type, throws failable: Bool = false)
}

operator class TypeApplicative {
	strongerThan: TypeMultiplicative
	associativity: right
}

infix operator -> : TypeApplicative
infix operator throws -> : TypeApplicative

derived infix operator func -> (Argument: Any.Type, Result: Any.Type) -> Function<from: Argument, to: Result>.Type
derived infix operator func throws -> (Argument: Any.Type, Result: Any.Type) -> Function<from: Argument, to: Result, throws: true>.Type