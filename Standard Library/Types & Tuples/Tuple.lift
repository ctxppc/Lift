@author: Constantino Tsarouhas
@copyright: Lift Standard Library © 2017 Lift Language Project

@available(from: Lift 1.0)
struct Tuple {
	
	@abstract: A value of a structured product type.
	@details {
		
		Tuples are a compact way to put different related values together in one value, without explicitly defining a structure type. A prime usage for them are as results of functions returning multiple values, e.g., a function `bounds(of numbers: [Int]) -> (min: Int, max: Int)` which efficiently finds the smallest and largest number in one pass and returns them in a tuple of type `(min: Int, max: Int)`.
		
		Tuple types are almost always defined using the shorthand form `(label1: Type1, label2: Type2, …)`. Every comma-separated item is an **element** of the tuple type and carries an optional label. Some or all elements can also be unlabelled when their meaning is clear from the context, e.g., `(String, length: Int)`.
		
		Tuples are almost always written using the similar shorthand form `(label1: value1, label2: value2, …)`. The label must be included for every value of a labelled element; no label may be associated with a value of an unlabelled element. As an example, for the tuple type `(String, age: Int)`, a valid tuple is written as `("some string", age: 25)`.
		
		The tuple type with zero elements contains exactly one value, the **unit value**. The unit tuple type is written as `()` as is its unit value.
		
	}
	
	type init() {
		Self.init(of: [], labels: [])
	}
	
	derived type init(of Elements: Array<of: Any.Type>, labels: Array<of: Symbol?>) where !labels.compacted().containsRepeatedOccurrences(), labels.count == Elements.count
	
	type let Elements: Array<of: Any.Type> {
		@abstract: The types of the individual elements of tuples of this tuple type.
	}
	
	type let labels: Array<of: Symbol?> where !labels.compacted().containsRepeatedOccurrences(), labels.count == Elements.count {
		@abstract: The types of the individual elements of tuples of this tuple type.
	}
	
	derived infix operator type func , <Value, label> (_: LabelledElement<of: Value, label: label>.Type) -> Tuple(of: Self.Elements ++ Value, labels: Self.labels ++ label).Type
	
	derived infix operator type func , <Value> (_: Value.Type) -> Tuple(of: Self.Elements ++ Value, labels: Self.labels ++ nil).Type
	
	type func typeOfElementWithLabel(_ label: Symbol) -> Any.Type? {
		guard let index = labels.indexOfFirst(occurrenceOf: label) else { return nil }
		return Elements[index]
	}
	
	derived init(_ elements: Elements)
	
	let elements: Elements {	// TODO: this is an instance of a type array. Compiler magic or a first-class language feature?
		@abstract: The individual elements in the tuple.
	}
	
	infix operator func , <Value, label> (labelledElement: LabelledElement<of: Value, label: label>) -> (Self, LabelledElement<of: Value, label: label>) {
		let NewTupleType = Self, LabelledElement<of: Value, label: label>
		return NewTupleType(self.elements ++ labelledElement.value)
	}
	
	infix operator func , <Value> (value: Value) -> (Self, Value) {
		let NewTupleType = Self, Value
		return NewTupleType(self.elements ++ value)
	}
	
	static infix operator func . (label: Symbol) -> (typeOfElementWithLabel(label) !! "unknown label") {
		
		@abstract: Returns the value associated with given label.
		@description {
			
			This operator allows the form `tuple.label` to get an element associated with `label`.
			
			The symbol must be statically evaluable. This is a requirement because the value type depends on it.
			
		}
		
		let index = labels.indexOfFirst(occurrenceOf: label) !! "contradiction with typeOfElementWithLabel()'s result"
		return elements[index]
		
	}
	
	static infix operator func . (index: Elements.Index) -> Elements[index] {
		
		@abstract: Returns the value at given index.
		@description {
			
			This operator allows the form `tuple.index` (e.g., `tuple.0`) to get an element at `index`.
			
			The index must be statically evaluable. This is a requirement because the value type depends on it.
			
		}
		
		return elements[index]
		
	}
	
	struct LabelledElement {
		
		derived type init(of Value: Any.Type, label: Symbol)
		type let Value: Any.Type
		type let label: Symbol
		
		derived init(_ value: Value)
		var value: Value
		
	}
	
}

@available(from: Lift 1.0)
extension Tuple : Equatable where Elements : Equatable {
	infix operator func == (other: Self) -> Bool {
		return self.elements == other.elements
	}
}

@available(from: Lift 1.0)
extension Tuple : Comparable where Elements : Comparable {
	infix operator func < (other: Self) -> Bool {
		return self.elements < other.elements
	}
}

@available(from: Lift 1.0)
extension Tuple : Hashable where Elements : Hashable {
	var hashValue: Int {
		return elements.hashValue
	}
}
