@author: Constantino Tsarouhas
@copyright: Lift Standard Library Â© 2017 Lift Language Project

@available(from: Lift 1.0)
protocol Collection : Sequence {
	
	@abstract: A finite sequence whose elements can be traversed multiple times, nondestructively, and accessed by an indexed subscript.
	
	type let failable = false
	type let infinite = false
	type let Subsequence: Collection.Type where Subsequence.Subsequence == Subsequence, !Subsequence.failable, !Subsequence.infinite, Subsequence.Element == Element
	
	type let Index: Comparable.Type {
		@abstract: A value that specifies a single element in the collection, or the position after the last element.
	}
	
	var startIndex: Index {
		@abstract: The position of the first element.
		get
	}
	
	var endIndex: Index {
		@abstract: The position after the last element.
		get
	}
	
	subscript (index: Index) -> Element {
		@abstract: Accesses the element at a given index.
		get
	}
	
	func index(before index: Index) -> Index {
		@abstract: Returns the index that specifies the element before the element specified by given index.
	}
	
	func index(after index: Index) -> Index {
		@abstract: Returns the index that specifies the element after the element specified by given index, or the end index if given index specifies the last element.
	}
	
}

@available(from: Lift 1.0)
extension Collection {
	derived existential type init(of Element: Any.Type)
}