@author: Constantino Tsarouhas
@copyright: Lift Standard Library Â© 2017 Lift Language Project

@available(from: Lift 1.0)
enum Optional {
	
	derived type init(_ Value: Any.Type)
	
	type let Value: Any.Type {
		@abstract: The type of the optional value.
	}
	
	implicit init(_ value: Value) {
		self = .some(value)
	}
	
	case none
	case some(_ value: Value)
	
}

let nil<Value> = Optional<Value>.none

extension Optional : BidirectionalCollection, MutableCollection {
	
	enum Index {
		case value
		case end
	}
	
	var startIndex: Index {
		switch self {
			case .none:	return .end
			case .some:	return .value
		}
	}
	
	var endIndex: Index {
		return .end
	}
	
	subscript (index: Index) -> Value {
		@precondition: index == .value
		get { return self !! "Unwrapping nil value" }
		set { self = newValue }
	}
	
	func index(before index: Index) -> Index {
		@precondition: index == .end
		@precondition: self != nil
		return .value
	}
	
	func index(after index: Index) -> Index {
		@precondition: index == .value
		return .end
	}
	
}

derived extension Optional : Equatable where Value : Equatable
derived extension Optional : Hashable where Value : Hashable
derived extension Optional : Comparable where Value : Comparable

postfix operator ?
derived postfix operator func ? <Value> (_: Value.Type) -> Optional<Value>.Type