@author: Constantino Tsarouhas
@copyright: Lift Standard Library Â© 2017 The Imaginary Lift Committee

@available(from: Lift 1.0)
struct Property {
	
	@abstract: A value associated with another value.
	@details: A property is a value `property` that is associated with a value `subject` that can be queried like this: `subject.property`.
	
	derived type init(on Subject: Any.Type, typed Value: Any.Type)
	
	type let Subject: Any.Type {
		@abstract: The type of values on which the property is defined.
	}
	
	type let Value: Any.Type {
		@abstract: The type of values that can be assigned to the property.
	}
	
	let symbol: Symbol {
		@abstract: The symbol of the property.
	}
	
}

@available(from: Lift 1.0)
struct Accessor : Functor {
	
	@abstract: A functor for a specific property that, given a subject, produces the value associated with that property on that subject.
	
	derived type init(on Subject: Any.Type, typed Value: Any.Type)
	
	derived init(for property: Property<on: Subject, typed: Value>)
	
	type let Subject: Any.Type {
		@abstract: The type of values on which the property is defined.
	}
	
	type let Value: Any.Type {
		@abstract: The type of values that can be assigned to the property.
	}
	
	let property: Property<on: Subject, typed: Value> {
		@abstract: The property for which this accessor is defined.
	}
	
	type let Argument = Subject
	type let Result = Value
	
	native func map(_ subject: Argument) -> Result
	
}